Problem 1: Examine arith1.c
(1) Using the code, give the complete grammar in BNF form
<prog> := <expr>
<expr> := <term> | <term> + <expr>
<term> := <factor> | <factor> * <term>
<factor> := ( <expr> ) | <number>
<number> := <digit> | <digit><number>
<digit> := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

(2) Is the grammar left or right recursive? How does that affect the associativity of plus and mult?
The grammer is right recursive, as can be seen in <expr> and <term>. As such, both plus and mult are right associative, as 2 + 3 + 4 would become <term> + (<term> + (<term>)) and 2 * 3 * 4 would become <factor> * (<factor> * (<factor>))



Problem 2: Add "^" and "-" operators to the language with "^" having highest precedence (besides parentheses), and "-" having higher precedence than "+" but less than "*"
<prog> := <expr>
<expr> := <subt> | <subt> + <expr>
<subt> := <term> | <term> - <subt>
<term> := <expo> | <expo> * <term>
<expo> := <factor> | <factor> ^ <expo>
<factor> := ( <expr> ) | <number>
<number> := <digit> | <digit><number>
<digit> := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9



Problem 3: Write left derivations for the following expressions according to the Problem 2 grammer; show only one step at a time
(1) 1 + 2 - 2
1.	<prog>
2.	<expr>
3.	<subt> + <expr>
4.	<term> + <expr>
5.	<expo> + <expr>
6.	<factor> + <expr>
7.	<number> + <expr>
8.	<digit> + <expr>
9.	1 + <expr>
10.	1 + <subt>
11.	1 + <term> - <subt>
12.	1 + <expo> - <subt>
13.	1 + <factor> - <subt>
14.	1 + <number> - <subt>
15.	1 + <digit> - <subt>
16.	1 + 2 - <subt>
17.	1 + 2 - <term>
18.	1 + 2 - <expo>
19.	1 + 2 - <factor>
20.	1 + 2 - <number>
21.	1 + 2 - <digit>
22.	1 + 2 - 2

(2) 1 + 2 - 3 * 5
1.	<prog>
2.	<expr>
3.	<subt> + <expr>
4.	<term> + <expr>
5.	<expo> + <expr>
6.	<factor> + <expr>
7.	<number> + <expr>
8.	<digit> + <expr>
9.	1 + <expr>
10.	1 + <subt>
11.	1 + <term> - <subt>
12.	1 + <expo> - <subt>
13.	1 + <factor> - <subt>
14.	1 + <number> - <subt>
15.	1 + <digit> - <subt>
16.	1 + 2 - <subt>
17.	1 + 2 - <term>
18.	1 + 2 - <expo> * <term>
19.	1 + 2 - <factor> * <term>
20.	1 + 2 - <number> * <term>
21.	1 + 2 - <digit> * <term>
22.	1 + 2 - 3 * <term>
23.	1 + 2 - 3 * <expo>
24.	1 + 2 - 3 * <factor>
25.	1 + 2 - 3 * <number>
26	1 + 2 - 3 * <digit>
27	1 + 2 - 3 * 5

(3) 2 ^ 5 ^ 2
1.	<prog>
2.	<expr>
3.	<subt>
4.	<term>
5.	<expo>
6. 	<factor> ^ <expo>
7. 	<number> ^ <expo>
8.	<digit> ^ <expo>
9.	2 ^ <expo>
10.	2 ^ <factor> ^ <expo>
11.	2 ^ <number> ^ <expo>
12.	2 ^ <number> ^ <expo>
13.	2 ^ <digit> ^ <expo>
14.	2 ^ 5 ^ <expo>
15.	2 ^ 5 ^ <factor>
16.	2 ^ 5 ^ <number>
17.	2 ^ 5 ^ <digit>
18.	2 ^ 5 ^ 2



Problem 4: Modfy arith1.c adding the new operators from problems 2 and 3.
arith1.c now contains the modified code



Problem 5: Examine arith2.c
(1) Using the code, give the complete grammar in BNF or EBNF form
<prog> := <expr>
<expr> := <term> {+ <term>}
<term> := <factor> {* <factor>}
<factor> := ( <expr> ) | <number>
<number> := <digit> {<digit>}
<digit> := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

(2) Is the grammar left or right recursive? How does that affect the associativity of plus and mult?
The grammer is ambiguous, with the exception of <number>; it can either be right associative or left associative depending on whether it is right-derived or left-derived.


Problem 6: Add "^" and "-" operators to the language with "^" having highest precedence (besides parentheses), and "-" having higher precedence than "+" but less than "*"
<prog> := <expr>
<expr> := <subt> {+ <subt>}
<subt> := <term> {- <term>}
<term> := <expo> {* <expo>}
<expo> := <factor> {^ <factor>}
<factor> := ( <expr> ) | <number>
<number> := <digit> {<digit>}
<digit> := 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9


Problem 7: Write left derivations for the following expressions according to the Problem 2 grammer; show only one step at a time
(1) 1 + 2 - 2
1.	<prog>
2.	<expr>
3.	<subt> + <subt>
4.	<term> + <subt>
5.	<expo> + <subt>
6.	<factor> + <subt>
7.	<number> + <subt>
8.	<digit> + <subt>
9.	1 + <subt>
10.	1 + <term> - <term>
11.	1 + <expo> - <term>
12.	1 + <factor> - <term>
13.	1 + <number> - <term>
14.	1 + <digit> - <term>
15.	1 + 2 - <term>
16.	1 + 2 - <expo>
17.	1 + 2 - <factor>
18.	1 + 2 - <number>
19.	1 + 2 - <digit>
20.	1 + 2 - 2

(2) 1 + 2 - 3 * 5
1.	<prog>
2.	<expr>
3.	<subt> + <subt>
4.	<term> + <subt>
5.	<expo> + <subt>
6.	<factor> + <subt>
7.	<number> + <subt>
8.	<digit> + <subt>
9.	1 + <subt>
10.	1 + <term> - <term>
11.	1 + <expo> - <term>
12.	1 + <factor> - <term>
13.	1 + <number> - <term>
14.	1 + <digit> - <term>
15.	1 + 2 - <term>
16.	1 + 2 - <expo> * <expo>
17.	1 + 2 - <factor> * <expo>
18.	1 + 2 - <number> * <expo>
19.	1 + 2 - <digit> * <expo>
20.	1 + 2 - 3 * <expo>
21. 	1 + 2 - 3 * <factor>
22.	1 + 2 - 3 * <number>
23.	1 + 2 - 3 * <digit>
24.	1 + 2 - 3 * 5

(3) 2 ^ 5 ^ 2
1.	<prog>
2.	<expr>
3.	<subt>
4.	<term>
5.	<expo>
6.	<factor> ^ <factor> ^ <factor>
7.	<number> ^ <factor> ^ <factor>
8.	<digit> ^ <factor> ^ <factor>
9.	2 ^ <factor> ^ <factor>
10.	2 ^ <number> ^ <factor>
11.	2 ^ <digit> ^ <factor>
12.	2 ^ 5 ^ <factor>
13.	2 ^ 5 ^ <number>
14.	2 ^ 5 ^ <digit>
15.	2 ^ 5 ^ 2



Problem 8: Modfy arith1.c adding the new operators from problems 2 and 3.
arith2.c now contains the modified code



Problem 9: Both _Bool and bool are available in the ISO C standard published in 2011.  Briefly explain:
(1) What are they used for?
Both are data types effectively used for storing the values of true or false as a 1 or 0

(2) Why do both exist?
_Bool is part of the C99 standard; it is considered a keyword, and is intentionally different but functionally the same as bool so that previous implmentations of bool wouldn't conflict, causing existing code to break when it was introduced. bool exists because many programmers manually define it in their code, as well as true and false.

(3) Is one better than the other? Why?
Objectively, _Bool is better because it being defined will mean that true and false are also defined; however, most code defined bool and _Bool as identical, meaning they are usually functionally the same.


Problem 10: What are pragmas? Why are they processed by the scanner?  Briefly, if you are a language designer what are the trade offs of providing pragmas in a language?
Pragmas are comments written into the source code of a program that help improve compilation, though some alter how the compilation works entirely. The scanner processes them so they can be used by the compiler, which runs after the scanner. Including pragmas in a language makes it more complicated, and can cause problems for programmers who don't know how to use them properly.


Problem 11: Rewrite the expressions a-d below in prefix notation
a) w ^ x ^ y  -  z
-^^wxy

b)  w - x  ^  y  ^  z
-w^^xyz

c) w  *  x  *  y  - z
-**wxy

d)  w + x  *  y  +  z
++w*xyz



Problem 12: Rewrite the expressions a-d below in postfix notation
a) w ^ x ^ y  -  z
wx^y^z-

b)  w - x  ^  y  ^  z
wxy^z^-

c) w  *  x  *  y  - z
wx*y*z-

d)  w + x  *  y  +  z
wxy*+z+



Problem 13: Ackerman Problems
a) What is the value of ack(1,0) ?
ack(1,0) = ack(0,1) = 1+1 = 2

b) What is the value of ack(0,6) ?
ack(0,6) = 7